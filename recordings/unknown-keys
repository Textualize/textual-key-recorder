#!/usr/bin/env python

from collections import defaultdict
from json import loads
from pathlib import Path


def br(s: str) -> str:
    return s.replace("\n", "<br>")


def tidy(notes: str) -> str:
    for case in (str.lower, str.upper, str.capitalize):
        for modifier in ("shift", "ctrl", "alt", "cmd"):
            for joiner in (" ", "+", "-"):
                notes = notes.replace(f"{case(modifier)}{joiner}", f"{modifier}-")
    return notes


def produce_report() -> None:
    """Produce a report from all the tkrec files."""
    known_unknowns: defaultdict[str, set[str]] = defaultdict(set)
    fixed = loads(
        (Path(__file__).parent / "fixed-sequences.json").read_text(encoding="utf8")
    )
    for recording in Path(__file__).parent.glob("*.tkrec"):
        for unknown in (findings := loads(recording.read_text(encoding="utf-8")))[
            "unknown"
        ]:
            # Ignoring those keys where I've managed to bounce on the tab
            # key after the recorded seemed to "do nothing", and if we've
            # got some notes...
            #
            # ...also, because modified F3 was a thing for a while and it's
            # now fixed, let's sneaky filter that out.
            if (
                not unknown["key"].endswith("\\t")
                and unknown["notes"]
                and not "f3" in unknown["notes"].lower()
            ):
                known_unknowns[unknown["key"]].add(
                    tidy(unknown["notes"]) + f" ({findings['environment']['terminal']}-"
                    f"{findings['environment']['os_system']})"
                )
    print("| Sequence | Notes | Handled Via |")
    print("| - | - | - |")
    for key, reasons in known_unknowns.items():
        car, *cdr = reasons
        fixed_via = (
            f"[#{fixed[key]}](https://github.com/Textualize/textual/pull/{fixed[key]})"
            if key in fixed
            else ""
        )
        print(f"| `{key}` | {br(car)} | {fixed_via} |")
        for reason in cdr:
            print(f"| | {br(reason)} | |")


if __name__ == "__main__":
    produce_report()
